class Solution {
    public List<List<Integer>> generate(int numRows) {
             List<List<Integer>> triangle = new ArrayList<>();

        // Edge case for 0 rows
        if (numRows == 0) {
            return triangle;
        }

        // Generate each row
        for (int rowNum = 0; rowNum < numRows; rowNum++) {
            // Initialize the current row
            List<Integer> row = new ArrayList<>();
            
            // The first element of each row is always 1
            row.add(1);

            // Calculate intermediate elements (from previous row) if rowNum >= 2
            for (int j = 1; j < rowNum; j++) {
                int aboveLeft = triangle.get(rowNum - 1).get(j - 1);
                int aboveRight = triangle.get(rowNum - 1).get(j);
                row.add(aboveLeft + aboveRight);
            }

            // The last element of each row is always 1 if rowNum > 0
            if (rowNum > 0) {
                row.add(1);
            }

            // Add the completed row to the triangle
            triangle.add(row);
        }

        return triangle;
       }
}
