class Solution {
    public List<String> letterCombinations(String digits) {
        if(digits == null || digits.isEmpty()){
            return new ArrayList<>();
        }
         String[] mapping = {
            "",     // 0
            "",     // 1
            "abc",  // 2
            "def",  // 3
            "ghi",  // 4
            "jkl",  // 5
            "mno",  // 6
            "pqrs", // 7
            "tuv",  // 8
            "wxyz"  // 9
        };
        List<String> result = new ArrayList<>();

        backtrack(result, digits, mapping,0, new StringBuilder());
        return result;
    }
     private void backtrack(List<String> result, String digits, String[] mapping, int index, StringBuilder current) {
        // Base case: if the current combination is complete
        if (index == digits.length()) {
            result.add(current.toString());
            return;
        }

        // Get the letters corresponding to the current digit
        String letters = mapping[digits.charAt(index) - '0'];

        // Explore each letter for the current digit
        for (char letter : letters.toCharArray()) {
            // Add the letter to the current combination
            current.append(letter);

            // Move to the next digit
            backtrack(result, digits, mapping, index + 1, current);

            // Backtrack: remove the last letter added
            current.deleteCharAt(current.length() - 1);
        }
    }
}
