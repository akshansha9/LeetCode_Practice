/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Dummy head to simplify the result list construction
        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;
        int carry = 0;

        // Traverse both lists until they are exhausted
        while (l1 != null || l2 != null) {
            // Get the values at the current nodes of l1 and l2, or 0 if null
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;

            // Compute sum and carry
            int sum = x + y + carry;
            carry = sum / 10; // Carry for the next addition
            int digit = sum % 10; // The digit to store in the current node

            // Create a new node for the result list
            current.next = new ListNode(digit);
            current = current.next;

            // Move to the next nodes in l1 and l2
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }

        // If there's a carry left, add a new node for it
        if (carry > 0) {
            current.next = new ListNode(carry);
        }

        // Return the next of dummy head, which points to the actual result
        return dummyHead.next;
    }
}
