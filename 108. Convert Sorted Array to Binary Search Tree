/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length == 0) {
            return null;
        }
        // Call the helper function to build the BST.
        return buildBST(nums, 0, nums.length - 1);
    }
    
    private TreeNode buildBST(int[] nums, int left, int right) {
        if (left > right) {
            return null; // Base case: when no elements are left in the subarray.
        }
        
        // Choose the middle element as the root to ensure balanced height.
        int mid = left + (right - left) / 2;
        
        // Create the current node with the middle element.
        TreeNode node = new TreeNode(nums[mid]);
        
        // Recursively build the left and right subtrees.
        node.left = buildBST(nums, left, mid - 1);
        node.right = buildBST(nums, mid + 1, right);
        
        return node; // Return the node (root of the subtree).
    }
}
